syntax = "proto3";
package NetProtocols.Game;

//-----------------------------数据-------------------

//SC 单个 游戏主题
message packet_data_RoomEntryInfo
{
	uint32 nRoomId = 1;
	uint32 nCreateTime = 2;
	uint32 nRoomState = 3; // 1:等待中， 2：游戏中
	bool bRobotCreate = 4; // 是否为机器人创建的房间
	
	string strRoomName = 5; //房间名
	string strPassword = 6; // 房间密码
	uint32 nMinBetCount = 7; // 最小下注数量
	uint32 nRoomFightCount = 8; //房间 战斗人员 数量
	uint32 nRoomFightMaxCount = 9; //房间 战斗人员 数量
	uint32 nRoomSpectatorCount = 10; //房间观察者数量
}

message packet_data_RoomEntryListInfo
{
	uint32 nPageIndex = 1;
	uint32 nMaxPage = 2;
	repeated packet_data_RoomEntryInfo m_RoomEntryInfoList = 3;
}

message packet_data_playerInfo
{
	uint32 nUserId = 1;
	uint32 nLoginType = 2;
	string UniqueIdentifier = 3;
	
	string strName = 4;
	uint32 nGoldCount = 5;
	uint32 nLevel = 6;
	uint32 nLevelExp = 7;
	uint32 nVipLevel = 8;

	uint32 nHeadIconId = 9;
	uint32 nWinCount = 10;
	uint32 nLoseCount = 11;
}

message packet_data_deskInfo
{
	uint32 nDeskId = 1;
	uint32 nUserId = 2;
	bool bPrepare = 3;
	bool bHang = 4;
}

message packet_data_deskcardInfo
{
	uint32 nDeskId = 1;
	repeated uint32 cardList = 2;
}

message packet_data_Basic_RoomInfo
{
	string strRoomName = 1;
	string strPassword = 2;
	uint32 nMaxDeskCount = 3;
	uint32 nMinBetCount = 4;
}

message packet_data_Detail_RoomInfo
{
	uint32 nRoomId = 1;
	uint32 nRoomState = 2;

	uint32 nRoomCreatorId = 3;
	uint32 nMyDeskId = 4;

	packet_data_Basic_RoomInfo mRoomBasicInfo = 5;
	repeated packet_data_playerInfo playerInfoList = 6;
	repeated packet_data_deskInfo deskInfoList = 7;
}

message packet_data_GameStartInfo
{
	uint32 nOpenCard = 1;//明牌
	uint32 nWhoGetOpenCardDeskId = 2;//谁拿到 翻牌
	uint32 nWhoFirstGetPokerDeskId = 3; // 谁第一个拿牌的凳子Id
	uint32 nLeftPokerCount = 4; // 分为两堆牌，左边堆含有 翻牌
	
	repeated packet_data_deskcardInfo deskCardList = 5;
}

//恢复 场景信息
message packet_data_RecoverSceneInfo
{
	uint32 nPlayerState = 1;
	uint32 nRoomState = 2;
	uint32 nGameState = 3;//游戏状态
	
	packet_data_Detail_RoomInfo mRoomInfo = 4;
	packet_data_GameStartInfo mGameStartInfo = 5;
	
	double fRecoverCdTime = 6; //cd时间
	uint32 nLandlordId = 7;//谁是地主
	uint32 nWhoRobLandlordingId = 8;//当前谁在抢地主
	repeated uint32 remainLandlordCardList = 9;
	uint32 nFinalAddMultuile = 10;
	uint32 nCurrentBetAddMultuileDeskId = 11; //当前谁在加倍
	packet_data_deskcardInfo lastPlayHandInfo = 12;//上一次出牌信息
	uint32 nWhoPlayhandingId = 13;//当前谁在出牌
}

//------------------------------------------- 逻辑 --------------------------------------------
message packet_cs_ConnectLobby
{
	packet_data_playerInfo mCreaterDB = 1;
}

message packet_sc_ConnectLobby_Result
{
	uint32 nErrorCode = 1;
	packet_data_RoomEntryListInfo m_RoomEntryListInfo = 2;
	packet_data_RecoverSceneInfo mRecoverSceneInfo = 3;
}

message packet_cs_DisConnectLobby
{
	
}

message packet_sc_DisConnectLobby_Result
{
	uint32 nErrorCode = 1;
}

 // CS 请求 游戏主题 入口列表
message packet_cs_RoomEntryInfoPage
{
	uint32 nPageIndex = 1;
}

 //SC 游戏主题 入口列表
message packet_sc_RoomEntryInfoPage_Result
{
	packet_data_RoomEntryListInfo m_RoomEntryListInfo = 1;
}

//请求 更新 自身数据
message packet_cs_UpdatePlayerDb 
{
	packet_data_playerInfo mPlayerDB = 1;
}

message packet_sc_UpdatePlayerDb_Result
{
	uint32 nErrorCode = 1;
}

message packet_cs_CreateRoom
{
	packet_data_Basic_RoomInfo mRoomBasicInfo = 1;
	packet_data_playerInfo mCreaterDB = 2;
}

message packet_sc_CreateRoomResult
{
	uint32 nErrorCode = 1;
	uint32 nRoomId = 2;
	packet_data_deskInfo mDeskInfo = 3;
	packet_data_playerInfo mPlayerInfo = 4;
}

message packet_cs_ModifyRoom
{
	packet_data_Basic_RoomInfo mRoomBasicInfo = 1;
}

message packet_sc_ModifyRoomResult
{
	uint32 nErrorCode = 1;
}

message packet_cs_EnterRoom
{
	uint32 nRoomId = 1;
	string strPassword = 2;
	packet_data_playerInfo mPlayerDB = 3;
}

message packet_cs_QuickJoinRoom
{
	packet_data_playerInfo mPlayerDB = 1;
}

message packet_sc_EnterRoomResult
{
	uint32 nErrorCode = 1;
	packet_data_RecoverSceneInfo mRecoverSceneInfo = 2;
}

message packet_cs_LeaveRoom
{
	
}

message packet_sc_LeaveRoomResult
{
	uint32 nErrorCode = 1;
}

//请求 添加机器人
message packet_cs_addRobot 
{
	uint32 nDeskId = 1; //房间位置Id
}

//请求 添加机器人 返回
message packet_sc_addRobotResult 
{
	uint32 nErrorCode = 1;
}

//请求 添加围观者 上凳子
message packet_cs_SpectatorToDesk 
{
	uint32 nUserId = 1;
	uint32 nDeskId = 2;
}

message packet_sc_SpectatorToDeskResult
{
	uint32 nErrorCode = 1;
}

//请求 Desk 下凳子 成为围观者
message packet_cs_DeskToSpectator
{
	uint32 nDeskId = 1;
}

message packet_sc_DeskToSpectatorResult
{
	uint32 nErrorCode = 1;
}

//主动 请求 换个凳子
message packet_cs_ZhuDongSwitchDesk 
{
	uint32 nDeskId = 1;//目标凳子
	uint32 nAction = 2; // 1: 交换凳子 2: 取消交换凳子
}

message packet_sc_ZhuDongSwitchDeskResult
{
	uint32 nErrorCode = 1;
	uint32 nDeskId = 2; //目标凳子
	uint32 nAction = 3;
}

//告诉 某个凳子 某人要和你换位置了
message packet_sc_WhoWithMechangeDesk 
{
	uint32 nDeskId = 1;//目标凳子
}

//回答 请求换个凳子
message packet_cs_changeDeskHuiDa 
{
	uint32 nDeskId = 1;//目标凳子
	bool bOk = 2;
}

// 双方交换凳子的结果
message packet_sc_ShuangFangSwitchDeskResult 
{
	uint32 nDeskId = 1;//对方回答的凳子
	bool bOk = 2; //切换成功 切换失败
}

//房主 请求 踢出房间
message packet_cs_kichPlayer 
{
	uint32 nUserId = 1;
}

// 房主 请求 踢出房间 返回
message packet_sc_kichPlayerResult 
{
	uint32 nErrorCode = 1;
}

//请求 是否准备(房主的话，就是开始游戏)
message packet_cs_orPrepare 
{
	bool bPrepare = 1;//是否准备	
}

message packet_sc_orPrepareReuslt
{
	uint32 nErrorCode = 1;
	bool bPrepare = 2; //是否准备	
}

//请求托管
message packet_cs_Hang 
{
	bool bHang = 1; //false：不托管，true:托管
}

message packet_sc_HangResult 
{
	uint32 nErrorCode = 1;
	bool bHang = 2;
}

//CS 请求 抢地主
message packet_cs_robLandlord 
{
	uint32 nRobAction = 1;//1:抢地主，2：不抢
}

message packet_sc_robLandlord_Result
{
	uint32 nErrorCode = 1;
}

// CS 请求 加倍
message packet_cs_AddBetMultuile 
{
	uint32 nMultuile = 1; //加倍
}

message packet_sc_AddBetMultuile_Result
{
	uint32 nErrorCode = 1;
}

//CS 请求出牌
message packet_cs_playhand 
{
	repeated uint32 cardList = 1;
}

message packet_sc_playhand_Result
{
	uint32 nErrorCode = 1;
}

//--------------------------------------------- 广播消息 -----------------------------------------
//通知 在线人数
message packet_sc_notice_Online_PeopleCount
{
	uint32 nPeopleCount = 1;
	uint32 nRobotCount = 2;
	uint32 nRealPlayerCount = 3;		
}

message packet_sc_notice_RoomEntryList_Change
{
	packet_data_RoomEntryListInfo m_RoomEntryListInfo = 1;
}

//通知 房间基本信息 改变
message packet_sc_notice_RoomBasicInfoChange 
{
	packet_data_Basic_RoomInfo mRoomBasicInfo = 1;
}

//通知 房间内 玩家Desk信息
message packet_sc_notice_DeskInfoChange 
{
	packet_data_deskInfo deskInfo = 1;
}

//通知 玩家信息 改变
message packet_sc_notice_PlayerInfoChange 
{
	packet_data_playerInfo playerInfo = 1;
}

//通知 有人进入房间
message packet_sc_notice_PlayerEnterRoomInfo 
{
	packet_data_playerInfo playerInfo = 1;
	packet_data_deskInfo deskInfo = 2;
}

//通知 有人离开房间
message packet_sc_notice_PlayerLeaveRoomInfo 
{
	uint32 nUserId = 1;
}

//通知 踢人信息
message packet_sc_notice_KichPlayerInfo
{
	uint32 nUserId = 1;
	uint32 nReason = 2; //1: 房主主动踢人， 2；房间已满，系统自动踢人
}

//通知 更新所有内部房间信息 
message packet_sc_notice_UpdateRoomAllInfo 
{
	packet_data_Basic_RoomInfo mRoomBasicInfo = 1;
	repeated packet_data_playerInfo playerInfoList = 2;
	repeated packet_data_deskInfo deskInfoList = 3;
}

//通知进入游戏
message packet_sc_notice_entergame
{
	packet_data_GameStartInfo mGameStartInfo = 1;
}

//通知 某人抢地主啦
message packet_sc_notice_robLandlord 
{
	uint32 nDeskId = 1;	
}

//通知 所有人抢地主的结果 （如果信息有误，则只传递给抢地主者）
message packet_sc_notice_robLandlordResult 
{
	uint32 nDeskId = 1;
	uint32 nRobAction = 2;//1:抢地主，2：不抢	
}

// 抢地主结束后 确认一个地主
message packet_sc_notice_SureLandlord 
{
	packet_data_deskcardInfo remainLandlordCardList = 1;
}

// 通知 该谁 加倍
message packet_sc_notice_who_AddBetMultuile 
{
	uint32 nDeskId = 1;
}

// 通知 加倍 结果
message packet_sc_notice_AddBetMultuileResult 
{
	uint32 nDeskId = 1;
	uint32 nMultuile = 2;
	uint32 nFinalAddMultuile = 3;
}

//通知谁出牌
message packet_sc_notice_whoPlayhand
{
	uint32 nDeskId = 1;
}

//通知 所有人  某个人的出牌信息（如果信息有误，则只传递给发牌者）
message packet_sc_notice_playhand_Result 
{
	packet_data_deskcardInfo playHandList = 1;// 某个玩家的出牌信息
}

//通知 胜负
message packet_sc_notice_winlose 
{
	uint32 nDeskId = 1; // 哪个凳子 胜利  
	repeated packet_data_deskcardInfo othercardList = 2;// 其他玩家剩余的牌的信息	
}













